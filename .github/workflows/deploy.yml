name: Deploy to SSH Machine

on:
  push:
    branches:
      - production  # or any branch you want to trigger the deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Remove existing files from the Web Frontend directory
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "rm -rf /home/vijit/Web\ Frontend/*"
    
    - name: Copy new files to SSH machine
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" rsync -avz --no-perms --omit-dir-times -e "ssh -o StrictHostKeyChecking=no" . ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/vijit/Web\ Frontend

    - name: Build Docker image
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
          cd /home/vijit/Web\ Frontend && sudo docker build . -t web-frontend
        "

    - name: Stop and remove existing container (if running)
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
          CONTAINER_ID=\$(sudo docker ps -q --filter ancestor=web-frontend-container)
          if [ ! -z \$CONTAINER_ID ]; then
            echo 'Stopping container with ID: \$CONTAINER_ID'
            sudo docker stop \$CONTAINER_ID
            echo 'Removing container with ID: \$CONTAINER_ID'
            sudo docker rm \$CONTAINER_ID
          else
            echo 'No running container found with name web-frontend-container'
          fi
        "
    
    - name: Run new Docker container
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
          sudo docker run -d -p 5002:3000 --restart=always --name web-frontend-container web-frontend
        "

